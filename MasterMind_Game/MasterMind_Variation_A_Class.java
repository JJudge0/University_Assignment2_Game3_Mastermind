import java.util.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
    public class MasterMind_Variation_A_1945979 {
	private final static BufferedReader buffer1 = new BufferedReader(new InputStreamReader(System.in));
	public static void main (String [] args) //Main class to compile the code for the console
	{   
		//Input1- First Option for range 6-10
		//Input2- Second option for 3-4 code
		//Input3- User Chooses Guesses MAX 12
		//Input4- User input on character
     PrintBanner(); //Prints Banner displayed on console
	 ConsoleOptionList(); //Prints Console Option list of what the user would like to pick.
	}
	public static void PrintBanner()
	{
		System.out.println("***********************");
		System.out.println("");
		System.out.println(
				"Welcome to Mastermind!\n"+
				"Created by: Jatinder\n"+
				"Student ID: 1945979\n");
		System.out.println("***********************");
		String banner = "  __  __           _                      _           _\n" +
				" |  \\/  |         | |                    (_)         | |\n" +
				" | \\  / | __ _ ___| |_ ___ _ __ _ __ ___  _ _ __   __| | \n" +
				" | |\\/| |/ _` / __| __/ _ \\ '__| '_ ` _ \\| | '_ \\ / _` |\n" +
				" | |  | | (_| \\__ \\ ||  __/ |  | | | | | | | | | | (_| | \n" +
				" |_|  |_|\\__,_|___/\\__\\___|_|  |_| |_| |_|_|_| |_|\\__,_|\n" +
		        "   ____                         \n" +
	        	"  / ___| __ _ _ __ ___   ___   \n" +
		        " | |  _ / _` | '_ ` _ \\ / _ \\ \n" +
		        " | |_| | (_| | | | | | |  __/ \n" +
		        "  \\____|\\__,_|_| |_| |_|\\___| \n" +        
		        "                                ";  
  // Uses rules to get player name from the player class and then the method making sure it's set to upper case each sentence is given on a new line so it looks more professional and clean.
   String rules = "Welcome"+"'"+Player_Name.In_Game_Player_Name().toUpperCase()+"',"+ "mastermind is a code-breaking game. The purpose is to guess the secret code decided by the computer\n"
				+ "but there is a twist and that is it's generated by you! There is a vast amount of colours to choose from known as the range.\n"
				+ "The range is made up by (6-10) colours and from there a (3-4) digit code can be generated also chosen by you.\n"
				+ "You win if the code is matched within the Max-LIMIT of 12 attempts, however you can choose how many attempts you get.\n"
				+ "Every time you try to guess the gameboard returns a code formed by(+) and (-) symbols: \n"
				+ "(+) ones indicate the number of characters of the right colour and in the right position! \n"
				+ "(-) ones indicate the characters of the right colour but in the wrong position. Have fun with the mastermind!\n"
				+ "Once you have entered your options to the 3 questions that are asked:\n"
				+ "You should only input these colours ['R','G','B','Y','O','P','W','C','T','N']\n";
		System.out.println(banner); //Prints ASCII text called "MasterMind Game".
		System.out.println(rules); // Prints out the rules which include player name set to be Uppercase only.
	}
	public static void ConsoleOptionList()
	{
		Scanner Console_input = new Scanner(System.in); //Declaring scanner to take user input.
		System.out.println("_______________________________________________________\n"); //Displays option list to user in console interface.
		System.out.println("1: [Play]"); 
		System.out.println("2: [Settings]"); 
		System.out.println("3: [Press '3' to play Again or Quit the Application]");
		System.out.println("4: [Exit The Program]");
		System.out.println("Please enter your choice:"); //Get user's choice
		int choice=Console_input.nextInt();
		Console_input.nextLine();
		//Display the title of the chosen module
		switch (choice) 
		{
		case 1: 
			System.out.println("User inputted:"+"["+choice+"]");
			System.out.println("-----------------------------------------------------");
			Player_Name.main(Player_Name.Player_Name1); //Goes to the player class to the player method displays first to enter players username then runs the game
			MasterMindGame(choice, choice, choice); //Matches 3 questions asked for the user
			break;
		case 2:
			System.out.println("User inputted:"+"["+choice+"]"); //Displays user input on console.
			System.out.println("-----------------------------------------------------");
	        Settings.main(null);// Goes to the setting class doesn't return any value so set as "null" default.
			break; //if condition is met it will break after each condition is met.
		case 3: 
			System.out.println("User inputted:"+"["+choice+"]");
			System.out.println("-----------------------------------------------------");
			restartGame(false); 
			break;
		case 4:
			System.out.println("User inputted:"+"["+choice+"]");
			System.out.println("-----------------------------------------------------");
			Exit_Game_Message();
			break;
		default: 
			if (choice!=1 || choice!=2 || choice!=3 || choice!=4) // Takes user input and matches it with the number 1-4 if none are chosen it will display error message 
			{
				System.out.println("-----------------------------------------------------");
				System.out.println("Invalid choice, please choose between the options 1-4");
				System.out.println("-----------------------------------------------------");
				PrintBanner(); 
			    ConsoleOptionList(); //Prints "Print Banner" and "Console Option List" method and loops back to start if user input is incorrect for validation.
			}
		}
	}
	//Global variables Default Options look in 'Settings' Class
    public static int Input_Question_1=6;  //COLOURS IN THE RANGE 6-10
    public static int Input_Question_2=4;  //CODE 3 OR 4
    public static int Input_Question_3=7; //GUESSES MAX 12
    public static int CorrectPosition;    //Letters in the correct position.
    public static int IncorrectPosition; //Letters that are correct but in the incorrect position.
    public static int Guess_Totally_Incorrect; //Letters that are incorrect and are in the incorrect position.
	public static void MasterMindGame(int input1, int input2, int input3)
	{  		
		Scanner ColoursinRange= new Scanner(System.in);
		System.out.println("_______________________________________________________\n");
		System.out.println("(Press '0' if you would like to Restart or Quit the Application!)");
		System.out.println("1: Enter a Number of colours you would like in between the range of(6-10):");
	//	input1=RangeColours.nextInt();
		String inputstring= "";
		boolean NumberVal=false;
		while(NumberVal==false) 
		{
			inputstring=ColoursinRange.nextLine();	
			if (Input_Questions_Checker(inputstring)== true) // In-reverse so takes input of user runs it through the function method down below called "int checker" 
			{
				NumberVal= true;
				input1=Integer.parseInt(inputstring);
			}
			//	First:
			if (input1==0)
			{
				System.out.println("Going to the restart option....");
				restartGame(false);//
			//	break First;
			}
			else if (input1>= 6 && input1<=10 || input1==0)
			{
				NumberVal=true;
				System.out.println("Number of Colours ENTERED"+":"+"("+input1+")");
		        Input_Question_1=input1; // Global variable is equal to input 1 for question 1
				ColourGenerator(); 
			}   
			else if(input1<=6 || input1>=10 ||input1!=0) // If smaller than 6 greater than 10 or not equal to 0 print error condition 
			{
				NumberVal=false; // if false loops until condition is met
				System.out.println("-----------------------------------------------------------------------");
				System.out.println("ERROR");
				System.out.println("Invalid choice"+"("+input1+")"+" Please choose a number between 6 & 10!");
				System.out.println("Please try again!");
				System.out.println("-----------------------------------------------------------------------");
				MasterMindGame(input1, input2, input3); // Loops back to start of the method
			}
		}	    
		//---------------------------------------------------------------------------------------------------------------//
		System.out.println("(Press '0' if you would like to Restart or Quit the Application!)");
		System.out.println("2: Enter the number of colours you would like within the code between(3 or 4):");
		Scanner NumberOfColoursinCode= new Scanner(System.in);
	//	input2= NumberOfColoursinCode.nextInt();
		boolean NumberVal1=false;
		while(NumberVal1==false) 
		{    
			inputstring=NumberOfColoursinCode.nextLine();	
			if (Input_Questions_Checker(inputstring)== true) //Checks user input against method for various symbols as error validation including('@;.?) etc, if true loops until 
			{
				NumberVal1= true;
				input2=Integer.parseInt(inputstring); //String is passed through as integer ensuring a valid number is input//compares user input to conditioned
			}
			//Second:
			if	(input2==0)  // if user input is '0' goes to restart option throughout the questions.
			{
				System.out.println("Going to restart option....");
				restartGame(false);
			//break Second;
			}
			if (input2==3 || input2==4) // if user input is '3' or '4' the condition will be true.
			{
				NumberVal1=true; // Ff 'false' the if statement won't run
				System.out.println("Number of Colours ENTERED"+":"+"("+input2+")");
				Input_Question_2=input2; // The global variable is overwritten and equals to input 2, however if global variable is switched it won't overwrite based on user input.
			}   
			else if (input2!=3 || input2!=4 || input2!=0)
			{
				NumberVal1=false; //Ensures if conditions not met loops back to the start question of the code until user input is valid.
				System.out.println("-----------------------------------------------------");
				System.out.println("ERROR");
				System.out.println("Invalid choice"+"("+input2+")"+" Please choose a number between 3 or 4!"); //displays user entered choice with error message.
				System.out.println("Please try again!");
				System.out.println("-----------------------------------------------------");
				System.out.print("2: Enter the number of colours you would like within the code between(3 or 4):\n"+
				"Please enter the number of colours would like:\n");
				input2= NumberOfColoursinCode.nextInt();
			}
		}
		//---------------------------------------------------------------------------------------------------------------//
		System.out.println("(Press '0' if you would like to Restart or Quit the Application!)");
		System.out.println("3: Please enter the number of Guessess you would like: (Max Amount of guesses allowed is 12 )\n");
		Scanner InputUserGuesses= new Scanner(System.in);
		// input3= Guesses.nextInt(); //Input 3 is going to be guesses
		boolean NumberVal2= false;   
		while(NumberVal2==false) 
		{
			inputstring=InputUserGuesses.nextLine();	
			if (Input_Questions_Checker(inputstring)==true) // COMMENT HERE
			{
				NumberVal2= true;
				input3=Integer.parseInt(inputstring);
			}
			//Third:
			if(input3==0)
			{
				System.out.println("Going to restart option....");
				restartGame(false);
			//	break Third;
			}
			if  (input3<=12 && input3>=0) //Guesses must be smaller than 12 but greater and equal to 0
			{
				NumberVal2= true;
				System.out.println("Number of Guesses ENTERED"+":"+"("+input3+")");
				Input_Question_3=input3;
			}
			else 
			{   
				NumberVal2=false; //ensures if conditions not met loops back to the start of the code until conditions are met.
				System.out.println("-----------------------------------------------------");
				System.out.println("ERROR");
				System.out.println("Invalid choice"+"("+input3+")"+"the maximum guesses allowed is 12:");
				System.out.println("Please try again!");
				System.out.println("-----------------------------------------------------");
				System.out.print("3: Enter the number of Guesses you would like (Maximum amount of guesses allowed:(12)\n"+
				"Please enter the number of Guessess you would like:\n");
				input3= InputUserGuesses.nextInt();
			}
		}
		char[] CG=ColourGenerator(); //means Colour Generated, which is a char array varaible name assigned against colour generator
		int Max_Tries= input3; //Input 3 is the guesses and uses max tries to countdown 
		int Matching_Index=0;
		int Match=0;
		//	char[] input=str.toCharArray();
		System.out.println("You have Chosen"+"["+input2+"]"+"Colours to make up the code:");
		System.out.println("_______________________________________________________");
		System.out.println("========================");
		System.out.println("Instructions on how to play:");
		System.out.println("1:To enter a guess against the generated code enter each character input in the format shown below and the using these colours:");
		System.out.println("2:COLOURS:"+"R=Red,G=Green,B=Blue,Y=Yellow,O=Red,P=Purple,W=White,C=Cyan,T=Turquoise,N=Navy:\n"+ "(:)For 3 Colours Generated Colour code input FORMAT as: RGB\n"+ "(:)For 4 Colours Generated Colour code input FORMAT as: RGBY");
		System.out.println("========================");
		System.out.println("Generated Code ANSWER:");
		System.out.println(CG);//Cheating gives generated answer
		while(Max_Tries>0 && Matching_Index!=1)
		{
			char[] Input4_guess=GetGuess(); //Where user inputs the guess  
			int[] random=User_Input_Against_Code_Generator(CG,Input4_guess); //Where the user and guess is checked and crossed matched
			Matching_Index=0;
			Match=0;
			if (Input4_guess.length==3) //If user chooses to input '3' at question 2 it will generate 3 
			{
				for(int i=0;i<Input4_guess.length;i++)
				{
					if(Input4_guess[i]==random[i])
					{
						Matching_Index++;
					}
					else if( random[i] == Input4_guess[0] || random[i] == Input4_guess[1] || random[i] == Input4_guess[2])
					{
						Match++; //INCREMENT EACH TIME WHEN IT MATCHES
					}
				}
				int correct3 = 0; //Default value 0 counts how many are correct
				int incorrect3 = 0; //Default value 0 counts how many are incorrect
				for (int i = 0; i <CG.length;i++) // takes length of the code generated by colour generator which is 3
				{
					for (int j = 0; j <Input4_guess.length;j++) // takes length of the code by user input which should be in this case 3
					{
						if (CG[i] == Input4_guess[j]) // compares generated code with each user input guess
						{
							correct3 ++; // increments by 1 if matches for correct
						}
						else if (CG[i]==Input4_guess[j])
						{
							incorrect3 ++; // increments by 1 if matches if incorrect
						}
					}

				}
				int Total1=3;
				//System.out.println(correct);
				CorrectPosition= correct3;
				//System.out.println(incorrect);
				IncorrectPosition= incorrect3;
				Total1 = correct3 + incorrect3;
				for (int a = 0;a < Total1; a++)
				{
					System.out.print("+"); //prints + sign if correct
				}
				for (int b = 0;b < CG.length-Total1; b++)
				{
					System.out.print("-"); //prints - sign if incorrect
				}
				int Incorrect_Letters_In_Incorrect_Position1;
				Incorrect_Letters_In_Incorrect_Position1= 3-(correct3+incorrect3); //3 is the total within this code to find out total incorrect 3-correct+incorrect
				Guess_Totally_Incorrect=Incorrect_Letters_In_Incorrect_Position1;
			}
			else if (Input4_guess.length==4)
			{
				for(int i=0;i<Input4_guess.length;i++)
				{
					if(Input4_guess[i]==random[i])
					{
						Matching_Index+=1;
					}
					else if( random[i] == Input4_guess[0] || random[i] == Input4_guess[1] || random[i] == Input4_guess[2] || random[i] == Input4_guess[3])
					{
						Match+=1;
					}
				}
				int correct4 = 0;
				int incorrect4 = 0; 
				for (int i = 0; i <CG.length;i++)
				{
					for (int j = 0; j <Input4_guess.length;j++)
					{
						if (CG[i] == Input4_guess[j])
						{
							correct4 ++;
						}
						else if (CG[i]==Input4_guess[j])
						{
							incorrect4 ++;
						}
					}

				}
				int Total2=4;
				//System.out.println(correct);
				CorrectPosition= correct4;
				//System.out.println(incorrect);
				IncorrectPosition= incorrect4;
				Total2 = correct4 + incorrect4;
				for (int a = 0;a < Total2; a++)
				{
					System.out.print("+");
				}
				for (int b = 0;b < CG.length-Total2; b++)
				{
					System.out.print("-");
				}
				int Incorrect_Letters_In_Incorrect_Position2;
				Incorrect_Letters_In_Incorrect_Position2= 4-(correct4+incorrect4); //4 is the total within this code change to Input
				Guess_Totally_Incorrect=Incorrect_Letters_In_Incorrect_Position2;
			}
		
			//			if(indexMatch==4) //INPUT1 IS THE MAX TRYS NOT THE CODE
			//random[0]
			if (random[1]==CG.length)
			{
				System.out.println("");
				Winning_Game_Message_Border(); //Displays the message you have won!
				System.out.println("Your guess is Correct! The Generated Code is:");
				System.out.println(CG); //gives answer to randomised number
				System.out.println("Completed in"+"["+Max_Tries+"]"+"attempts.");
				System.out.println("===Result:===");
				System.out.println("(:)Letters guessed Correctly:"+CorrectPosition);
				System.out.println("(:)Letters guessed Incorrectly:"+IncorrectPosition);
				System.out.println("(:)Letters that where totally wrong:"+Guess_Totally_Incorrect);
				int[] Score_result_Winners=User_Input_Against_Code_Generator(CG,Input4_guess);
				if (Score_result_Winners[0]==CG.length)
				{ //USE CG.length instead of settings if it doesn't work!
					int score=Settings.Guessing_Score*CG.length+input1+Max_Tries; //Uses 10 points per a guess multiples by length of the code 3 or 4 adds the colours in the range of users choice and subtracts from how many attempts it takes
					System.out.println("Your score"+","+Player_Name.In_Game_Player_Name().toUpperCase()+":"+"["+score+"]"+"points");
				}
				restartGame(false); //if true the game will loop back to the menu so instead of 'true' must be 'false' so ends game
				//	break;  // optional if the code continues on
			}
			else{Max_Tries--; //decreases from user input on guesses
			if(Max_Tries>1) //If user tries are more than 1 it will loop until it's "maxtry ==1" then displays the last attempt.
			{
				System.out.println("You have guessed"+"["+CorrectPosition+"]"+" correct letter's in the correct position,"+
				"and"+"["+IncorrectPosition+"]"+" correct letter's in the incorrect position. Meaning you have"+"["+Guess_Totally_Incorrect+"]"+"incorrect letters.\n"+Max_Tries+"attempt remaining.");
			}
			else if(Max_Tries==1)
			{
				System.out.println("You have guessed "+"["+CorrectPosition+"]"+"correct letter's in the correct position,"+ 
				" and"+"["+IncorrectPosition+"]"+"correct letter's in the incorrect position. Meaning you have"+"["+Guess_Totally_Incorrect+"]"+"incorrect letters.\nLast attempt. Good luck!!"); //RANBOM[1] MATCH WAS THERE
			}
			else
			{
				System.out.println("");
				Lost_Game_Message_Border();
				System.out.println("Your guess is Incorrect! The Generated Code is:");
				System.out.println(CG);
				System.out.println("Unlucky! You have failed to guess the generated code using"+"["+input3+"]"+"attempts!");
				System.out.println("===Result:===");
				System.out.println("(:)Letters guessed Correctly:"+CorrectPosition);
				System.out.println("(:)Letters guessed Incorrectly:"+IncorrectPosition);
				System.out.println("(:)Letters that where totally wrong:"+Guess_Totally_Incorrect);
				int[] Score_result=User_Input_Against_Code_Generator(CG,Input4_guess);
				if (Score_result[0]!=CG.length)
				{
				    int score=Settings.Guessing_Score*CG.length-input1-Max_Tries;      
					System.out.println("Your score"+","+Player_Name.In_Game_Player_Name().toUpperCase()+":"+"["+score+"]"+"points");
				}
				System.out.print("\n"+restartGame(false)); //if "RestartGame" is true the game will carry on with the methods and not loop back to the menu so instead of 'true' it  must be set 'false' 
				// When the "restartGame" is set false it stops the continuing of the methods and ask the user 'Y' yes to loop back to menu and if 'N' ends code displays exit game message.
			}

			}
		}
	}

	public static char[] GetGuess()
	{
		char[] CG=ColourGenerator();
		Scanner EnterGuess= new Scanner(System.in);
		System.out.println("Colours Available:['R','G','B','Y','O','P','W','C','T','N']"); // Displays list of Colours in character form before each guess is inputed.
		System.out.println("Please enter your"+"["+Input_Question_2+"]"+"guesses,"+ Player_Name.In_Game_Player_Name().toUpperCase()+":"); //Displays the number of colours in the code user has chosen 3 or 4 also player name is included as each guess is asked.
//		while (!EnterGuess.hasNext("[A-Za-z]+")) 
//		{
//	        System.out.println("Nope, that's not it!");  // FOR CHARACTER ONLY INPUT ELMINATES INTEGER USERINPUT
//	        GetGuess();
//	     //   EnterGuess.next().toUpperCase(); 
//	    }
		String str=EnterGuess.next().toUpperCase(); 
		char input=str.charAt(0);          //EnterGuess.hasNext("[A-Za-z]+") && it's for the NUMBERS DOESN'T INCLUDE NUMBERS
		if(str.length()!=Input_Question_2 && str.replaceAll("[^A-Za-z]+","").length()!=Input_Question_2) //|| input >= 'A' && input <='Z' )    //input.replaceAll("\\D","").length()!=4)
		{   
			System.out.println("Invalid Character length. You must enter"+"["+Input_Question_2+"]"+"characters with the colours listed below:");
			return GetGuess();
		}
		else if(str.equals("ANSWER"))
		{
			System.out.println(CG);
		}
		char[] guess = ColourGenerator();   // Default option: new char[4]; 
		for (int i = 0; i <Input_Question_2; i++)
		{
			guess[i] =(char)(str.charAt(i));      //(char) Integer.parseInt(String.valueOf(str.charAt(i)));
		}
		return guess;
	}


	// Generate a random character array
	public static char[] ColourGenerator() //FOR Input1/Input2
	{
		int word;
		word =Input_Question_2;  //Size of the array for the 3 and 4 letter code
		char [] CG=new char[word];//Char array size is based of Input_Question_2
		char[] Colours={ 'R','G','B','Y','O','P','W','C','T','N'};// COLOURS STORED IN THIS ARRAY 10 elements                   
		boolean[] Assign_Character_Index=new boolean[Colours.length];//  Gets 10 elements or the size of the array and makes it a boolean 
		for(int i=0;i<CG.length;i++)
		{
			int index;
			do{
				Random Randomise= new Random(); 
				int RandomNumber=Randomise.nextInt(Input_Question_1); 
				index=(int)(RandomNumber); //IMPORTANT RANDOMISES BASED OF QUESITON 1 USER PICKS BETWEEN 6 AND 10 HERE!
		}
			while(Assign_Character_Index[index]==true);//if character is true and it's valid it will save against randomised number and assign it a variable
			//When the while loop corresponds to the same index it should return false, which means the character is saved and removes duplicates when each index is different the while loop saves the character.
			CG[i]=Colours[index];//Get the corresponding character based on the randomised index and assign it to each element in CG
			// Change the elements around
			Assign_Character_Index[index]=true;
		}
		return CG;
	}

	
	public static int[] User_Input_Against_Code_Generator(char[] CG,char[] User_input)
	{  // Size of the array to match the generated code MAX is UP TO 4
		int[] Comparing_result=new int[4];//The default is 0,0, assuming that result[0] is in position, result[1] is a character pair,

		for (int i = 0; i < CG.length; i++) 
		{// Generated Colour code
			for (int j = 0; j < User_input.length; j++) 
			{// User input
				if(CG[i]==User_input[j])
				{// If compares matches
					Comparing_result[1]++;//The number of characters is increased by 1 if comparing is true
					if(i==j)
					{//Stored in Array position result[0]
						Comparing_result[0]++;
					}
			       // break; // The remaining input elements don't  compare anymore from result[0]++
			    }
			}
		}
		return Comparing_result;
	}
//==============================================================Questions:1,2,3 user input number Validation==============================
	    public static boolean Input_Questions_Checker(String Input_Question123 )
	    {
	    	boolean CheckUserInputIsNumbers = false;
	    	try {
	    		Integer.parseInt(Input_Question123); // if integer parse through to be correct and it's not a symbol for example it will return true if not it will return an error
	    		CheckUserInputIsNumbers = true;
	    	}
	    	catch (NumberFormatException e)
	    	{
	    		CheckUserInputIsNumbers = false;
	    	}
	    	return CheckUserInputIsNumbers;
	    }
//==============================================================Questions:1,2,3 user input number Validation===============================

//==============================================================Restart Validation=================================================		
	    public static char Single_Character_Checker(String Output_message, char Input_values[]) // Validation for restart Game asks for character
	    {
	    	char UserInput = 0;
	    	boolean validate_UserInput = false; // default is false if true breaks loop and returns an yes or no depending on user input
	    	do {
	    		try { // surrounded with try and catch
	    			System.out.print(Output_message);
	    			UserInput = buffer1.readLine().toUpperCase().charAt(0); // Uses 1 line to read 1 character at uppercase and ensure it matches the condition of Y and N
	    			for (char temp_value : Input_values) // Compares value between user input and one of the conditions 
	    			{
	    				if (UserInput == temp_value)
	    					validate_UserInput = true;
	    			}
		    		if (!validate_UserInput) 
		    		{
		    		    System.err.println("[|X--X|]"+ "Your input is not valid, please try again!");
		    		}
		    	        } 
	    		    catch (IOException e) 
		    		{
		    			System.err.println("[|X--X|]"+" Your input is not a character, please try again!");
		    		 }
	    	     } while (!validate_UserInput);
	    	return UserInput;
	    }
//==================================================================================================================================	
	    

//==============================================================Winning Game Message Method ========================================		    
		public static void Winning_Game_Message_Border() 
		{
			String message1 = "WELL DONE"+","+Player_Name.In_Game_Player_Name().toUpperCase()+"!"+"YOU HAVE WON, VICTORY IS YOURS! CONGRATULATIONS!!!";
			String border1 = "";
			StringBuilder output1 = new StringBuilder();
			for (int i = 2; i < message1.length() +8; i++) 
			{
				border1 += "#";
			}
			output1.append(border1).append("\n");
			output1.append(String.format("%s%" + (border1.length() - 1) + "s%n", "|", "|"));
			output1.append(String.format("%s %s%" + (border1.length() - message1.length() - 2) + "s%n", "+", message1, "+"));
			output1.append(String.format("%s%" + (border1.length() - 1) + "s%n", "|", "|"));
			output1.append(border1).append("\n");
			System.out.println(output1);
		}
//====================================================================================================================================	
		
		
//==============================================================Losing Game Message Method=============================================
		public static void Lost_Game_Message_Border() 
		{
			String message2 = "UN-LUCKY"+","+ Player_Name.In_Game_Player_Name().toUpperCase()+"!"+ "YOU HAVE LOST,VICTORY IS NOT YOURS YET! BETTER LUCK NEXT TIME!!! :(";
			String border2 = "";
			StringBuilder output2 = new StringBuilder();
			for (int i = 2; i < message2.length() +8; i++) 
			{
				border2 += "#";
			}
			output2.append(border2).append("\n");
			output2.append(String.format("%s%" + (border2.length() - 1) + "s%n", "|", "|"));
			output2.append(String.format("%s %s%" + (border2.length() - message2.length() - 2) + "s%n", "+", message2, "+"));
			output2.append(String.format("%s%" + (border2.length() - 1) + "s%n", "|", "|"));
			output2.append(border2).append("\n");
			System.out.println(output2);
		}
//=====================================================================================================================================
		
//==============================================================Restart Method=========================================================	
		public static boolean restartGame( boolean restart) 
		{
			restart = false; // Default boolean is set at false
			char User_Input = Single_Character_Checker("[X--X] Would you like to play again?[y,n]: ", new char[] { 'y','Y', 'n','N' }); //Checks through a method for single characters matching 'Y' and 'N' which is set to meet condition of upper and lower case depending on user input.
			if (User_Input == 'y'||User_Input == 'Y') //compares user input to condition once checked it will run code accordingly and the method within it
			{
				restart = true;// if condition is true it will run the method
				PrintBanner();
				ConsoleOptionList();
			}
			else if (User_Input == 'N'||User_Input == 'n') //compares user input to condition
			{
				restart = false; // if condition is false it will run the method
				Exit_Game_Message();
			}
			return restart; // returns 
		}
		private static void  Exit_Game_Message()
		{
			System.out.println("-----------------------------------------------");
			System.out.println("Terminating Program....");
			System.out.println(".//../../..//.../...");
			System.out.println(".//../../..//.../...");
			Exit_Game_Message_Border(); // calls on method to display Exit game message.
			System.err.println("Program Terminated././././././. please CLOSE CONSOLE WINDOW!");
			System.out.println("-----------------------------------------------");
			Clearing_Console();
		}
//=====================================================================================================================================
		
//==============================================================Exit Game Message Method===============================================		
		public static void Exit_Game_Message_Border() 
		{
			String message3 = "IT'S SAD TO SEE YOU GO, COME BACK SOON BUT THANK YOU FOR PLAYING!"+"," + Player_Name.In_Game_Player_Name().toUpperCase()+"!"; //Print goodbye message with default username, known as "User1", however overwritten if user enters username.
			String border3 = "";
			StringBuilder output3 = new StringBuilder();
			for (int i = 2; i < message3.length() +8; i++) 
			{
				border3 += "#";
			}
			output3.append(border3).append("\n");
			output3.append(String.format("%s%" + (border3.length() - 1) + "s%n", "|", "|"));
			output3.append(String.format("%s %s%" + (border3.length() - message3.length() -2) + "s%n", "+", message3, "+"));
			output3.append(String.format("%s%" + (border3.length() - 1) + "s%n", "|", "|"));
			output3.append(border3).append("\n");
			System.out.println(output3);
		}
		
//=============================================================Clearing Console Method===================================================
		private static void  Clearing_Console()
		{
			for (int i = 0; i < 5; ++i)//Loops 5 times
			System.out.println();// Creates empty space on the Console depending on for loop: FOR LOOP SET TO INCREMENT 5 TIMES.
			System.exit(0); // Exits program doesn't display other methods.

		}
//=======================================================================================================================================	
}
